local FillColor = Color3.fromRGB(84, 11, 12)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255, 255, 255)
local OutlineTransparency = 0

local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local UserInputService = game:FindService("UserInputService")
local lp = Players.LocalPlayer
local connections = {}
local highlightEnabled = true

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local function CreateHealthBar(plr)
    if plr == lp then return end  -- Skip health bar for local player
    local character = plr.Character or plr.CharacterAdded:Wait()
    local head = character:WaitForChild("Head")
    local humanoid = character:WaitForChild("Humanoid")

    local billboardGui = head:FindFirstChild("HealthBar") or Instance.new("BillboardGui")
    billboardGui.Name = "HealthBar"
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(5, 0, 0.55, 0)
    billboardGui.StudsOffset = Vector3.new(0, 3, 0)
    billboardGui.AlwaysOnTop = true  -- Ensure the health bar is always visible
    billboardGui.Parent = head

    local background = billboardGui:FindFirstChild("Background") or Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(0.985, 0, 0.559, 0)
    background.Position = UDim2.new(0.5, 0, 0.5, 0)
    background.AnchorPoint = Vector2.new(0.5, 0.5)  -- Center the background
    background.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    background.BackgroundTransparency = 0.5  -- Adjust transparency for better visibility
    background.BorderSizePixel = 0
    background.Parent = billboardGui

    local healthBar = background:FindFirstChild("HealthBar") or Instance.new("Frame")
    healthBar.Name = "HealthBar"
    healthBar.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
    healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthBar.BorderSizePixel = 0
    healthBar.Parent = background

    if connections[plr] then
        connections[plr]:Disconnect()
    end
    connections[plr] = humanoid.HealthChanged:Connect(function(health)
        healthBar.Size = UDim2.new(health / humanoid.MaxHealth, 0, 1, 0)
    end)
end

local function Highlight(plr)
    if plr == lp then return end  -- Skip highlight for local player
    local highlight = Storage:FindFirstChild(plr.Name) or Instance.new("Highlight")
    highlight.Name = plr.Name
    highlight.FillColor = FillColor
    highlight.DepthMode = DepthMode
    highlight.FillTransparency = FillTransparency
    highlight.OutlineColor = OutlineColor
    highlight.OutlineTransparency = OutlineTransparency
    highlight.Parent = Storage
    
    local plrchar = plr.Character or plr.CharacterAdded:Wait()
    highlight.Adornee = plrchar
    CreateHealthBar(plr)

    if connections[plr] then
        connections[plr]:Disconnect()
    end
    connections[plr] = plr.CharacterAdded:Connect(function(char)
        highlight.Adornee = char
        CreateHealthBar(plr)
    end)
end

local function ToggleHighlights()
    highlightEnabled = not highlightEnabled
    if highlightEnabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if not Storage:FindFirstChild(plr.Name) and plr ~= lp then
                Highlight(plr)
            end
        end
    else
        for _, highlight in pairs(Storage:GetChildren()) do
            highlight:Destroy()
        end
        for _, connection in pairs(connections) do
            connection:Disconnect()
        end
        connections = {}

        -- Hide health bars
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= lp then
                local character = plr.Character
                if character then
                    local head = character:FindFirstChild("Head")
                    if head then
                        local healthBar = head:FindFirstChild("HealthBar")
                        if healthBar then
                            healthBar:Destroy()
                        end
                    end
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.K and not gameProcessedEvent then
        ToggleHighlights()
    end
end)

Players.PlayerAdded:Connect(function(plr)
    if highlightEnabled and plr ~= lp then
        Highlight(plr)
    end
end)

for i, v in pairs(Players:GetPlayers()) do
    if highlightEnabled and v ~= lp then
        Highlight(v)
    end
end

Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)
